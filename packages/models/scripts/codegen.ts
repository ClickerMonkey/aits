/**
 * Code generation utilities for creating TypeScript model files
 */

import * as fs from 'fs/promises';
import * as path from 'path';
import type { ModelInfo } from '@aits/ai';


/**
 * Convert ModelInfo array to TypeScript source code
 */
export function generateModelTS(models: ModelInfo[], exportName: string): string {
  const stringify = (x: any, space?: number | string | undefined) => 
    (JSON.stringify(x, null, space) || '')
      .replace(/"([^"]+)":/g, '$1:')
      .replace(/\n/g, '\n  ')
      .trim() || undefined;

  const serialized = models.map(m => {
    const fields: [any, string][] = [
      [m.id, `id: '${m.id}'`],
      [m.provider, `provider: '${m.provider}'`],
      [m.name, `name: '${m.name}'`],
      [m.contextWindow, `contextWindow: ${m.contextWindow}`],
      [m.maxOutputTokens, `maxOutputTokens: ${m.maxOutputTokens}`],
      [m.tier, `tier: '${m.tier}'`],
      [m.tokenizer, `tokenizer: '${m.tokenizer}'`],
      [m.capabilities, `capabilities: new Set([${Array.from(m.capabilities).map(c => `'${c}'`).join(', ')}])`],
      [m.supportedParameters?.size, `supportedParameters: new Set([${Array.from(m.supportedParameters || []).map(p => `'${p}'`).join(', ')}])`],
      [m.pricing, `pricing: ${stringify(m.pricing, 2)}`],
      [m.metrics, `metrics: ${stringify(m.metrics, 2)}`],
      [m.metadata, `metadata: ${stringify(m.metadata, 2)}`],
    ];

    const fieldStrings = fields
      .filter(([value]) => value !== undefined)
      .map(([, str]) => `  ${str}`);

    return `{\n${fieldStrings.join(',\n')}\n}`;
  }).join(', ');

  return `/**
 * Generated model data
 *
 * This file is auto-generated by the scraper scripts.
 * Do not edit manually - your changes will be overwritten.
 *
 * To regenerate, run: npm run scrape
 */

import type { ModelInfo } from '@aits/ai';

export const ${exportName}: ModelInfo[] = [${serialized}];
`;
}

/**
 * Write model data to TypeScript file
 */
export async function writeModelTS(
  models: ModelInfo[],
  exportName: string,
  outputPath: string
): Promise<void> {
  const content = generateModelTS(models, exportName);
  await fs.mkdir(path.dirname(outputPath), { recursive: true });
  await fs.writeFile(outputPath, content, 'utf-8');
}

/**
 * Generate the models/index.ts file that aggregates all provider models
 */
export function generateModelsIndexTS(): string {
  return `/**
 * Generated models index
 *
 * This file is auto-generated by the scraper scripts.
 * Do not edit manually - your changes will be overwritten.
 *
 * To regenerate, run: npm run scrape
 */

import type { ModelInfo } from '@aits/ai';
import { openaiModels } from './openai';
import { openrouterModels } from './openrouter';
import { replicateModels } from './replicate';

export { openaiModels, openrouterModels, replicateModels };

export const models: ModelInfo[] = [
  ...openaiModels,
  ...openrouterModels,
  ...replicateModels,
];
`;
}

/**
 * Generate the main src/index.ts file
 */
export function generateMainIndexTS(): string {
  return `/**
 * Generated main index
 *
 * This file is auto-generated by the scraper scripts.
 * Do not edit manually - your changes will be overwritten.
 *
 * To regenerate, run: npm run scrape
 */

export { models, openaiModels, openrouterModels, replicateModels } from './models';
export { transformers } from './transformers';
`;
}
